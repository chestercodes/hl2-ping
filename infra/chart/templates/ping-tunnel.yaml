apiVersion: apps/v1
kind: Deployment
metadata:
  name: ping-cloudflared
spec:
  selector:
    matchLabels:
      app: ping-cloudflared
  replicas: 2 # You could also consider elastic scaling for this deployment
  template:
    metadata:
      labels:
        app: ping-cloudflared
    spec:
      containers:
        - name: ping-cloudflared
          image: cloudflare/cloudflared:2024.6.1
          args:
            - tunnel
            - --no-autoupdate
            # Points cloudflared to the config file, which configures what
            # cloudflared will actually do. This file is created by a ConfigMap
            # below.
            - --config
            - /etc/cloudflared/config/config.yaml
            - run
          livenessProbe:
            httpGet:
              # Cloudflared has a /ready endpoint which returns 200 if and only if
              # it has an active connection to the edge.
              path: /ready
              port: 2000
            failureThreshold: 1
            initialDelaySeconds: 10
            periodSeconds: 10
          env:
          - name: TUNNEL_TOKEN
            valueFrom:
              secretKeyRef:
                name: ping-infra
                key: tunnel-token
          volumeMounts:
            - name: config
              mountPath: /etc/cloudflared/config
              readOnly: true
            # Each tunnel has an associated "credentials file" which authorizes machines
            # to run the tunnel. cloudflared will read this file from its local filesystem,
            # and it'll be stored in a k8s secret.
            # - name: creds
            #   mountPath: /etc/cloudflared/creds
            #   readOnly: true
      volumes:
        # - name: creds
        #   secret:
        #     # By default, the credentials file will be created under ~/.cloudflared/<tunnel ID>.json
        #     # when you run `cloudflared tunnel create`. You can move it into a secret by using:
        #     # ```sh
        #     # kubectl create secret generic github-tunnel-credentials \
        #     # --from-file=credentials.json=/Users/yourusername/.cloudflared/<tunnel ID>.json
        #     # ```
        #     secretName: github-tunnel-credentials
        # Create a config.yaml file from the ConfigMap below.
        - name: config
          configMap:
            name: ping-cloudflared
            items:
              - key: config.yaml
                path: config.yaml
---
# This ConfigMap is just a way to define the cloudflared config.yaml file in k8s.
# It's useful to define it in k8s, rather than as a stand-alone .yaml file, because
# this lets you use various k8s templating solutions (e.g. Helm charts) to
# parameterize your config, instead of just using string literals.
apiVersion: v1
kind: ConfigMap
metadata:
  name: ping-cloudflared
data:
  config.yaml: |
    # Name of the tunnel you want to run
    tunnel: {{ .Values.tunnel_name }}

    credentials-file: /etc/cloudflared/creds/credentials.json

    # Serves the metrics server under /metrics and the readiness server under /ready
    metrics: 0.0.0.0:2000

    # Autoupdates applied in a k8s pod will be lost when the pod is removed or restarted, so
    # autoupdate doesn't make sense in Kubernetes. However, outside of Kubernetes, we strongly
    # recommend using autoupdate.
    no-autoupdate: true

    # The `ingress` block tells cloudflared which local service to route incoming
    # requests to. For more about ingress rules, see
    # https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/ingress
    #
    # Remember, these rules route traffic from cloudflared to a local service. To route traffic
    # from the internet to cloudflared, run `cloudflared tunnel route dns <tunnel> <hostname>`.
    # E.g. `cloudflared tunnel route dns example-tunnel tunnel.example.com`.
    ingress:
    - hostname: ping-production-{{ .Values.cluster_name }}.{{ .Values.top_level_domain }}
      service: http://traefik.kube-system.svc.cluster.local:80
    - hostname: ping-staging-{{ .Values.cluster_name }}.{{ .Values.top_level_domain }}
      service: http://traefik.kube-system.svc.cluster.local:80

    # This rule matches any traffic which didn't match a previous rule, and responds with HTTP 404.
    - service: http_status:404
